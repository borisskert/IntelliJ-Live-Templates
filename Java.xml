<templateSet group="Java">
  <template name="req" value="java.util.Objects.requireNonNull($PARAMETER$, &quot;[$CLASS_NAME$] The variable '$PARAMETER$' must not be null&quot;);" description="inserts Objects.requireNonNull check" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="PARAMETER" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="test4" value="@org.junit.Test&#10;public void should$TEST$() throws Exception {&#10;    $END$&#10;}" description="generates JUnit4 test" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="TEST" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="bef4" value="@org.junit.Before&#10;public void setup() throws Exception {&#10;    $END$&#10;}" description="generates JUnit4 before method" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="aeq" value="org.hamcrest.MatcherAssert.assertThat($SOMETHING$, org.hamcrest.Matchers.is(org.hamcrest.Matchers.equalTo($OTHER$)));$END$" description="assertThat equals value [with hamcrest]" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="SOMETHING" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="OTHER" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ainstanceof" value="org.hamcrest.MatcherAssert.assertThat($SOMETHING$, org.hamcrest.Matchers.is(org.hamcrest.Matchers.instanceOf($CLASS$)));$END$" description="assertThat is instanceOf [with hamcrest]" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="SOMETHING" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CLASS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="test5" value="@org.junit.jupiter.api.Test&#10;public void should$TEST$() throws Exception {&#10;    $END$&#10;}" description="generates JUnit5 test" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="TEST" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="bef5" value="@org.junit.jupiter.api.BeforeEach&#10;public void setup() throws Exception {&#10;    $END$&#10;}" description="generates JUnit5 before method" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="aexc5" value="try {&#10;    $END$&#10;    org.junit.jupiter.api.Assertions.fail(&quot;Should throw $EXCEPTION$&quot;);&#10;} catch ($EXCEPTION$ e) {&#10;    org.hamcrest.MatcherAssert.assertThat(e.getMessage(), org.hamcrest.Matchers.is(org.hamcrest.Matchers.equalTo(&quot;$MESSAGE$&quot;)));&#10;}" description="generates a block which checks for an expected exception during a JUnit 5 test" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="EXCEPTION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MESSAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="anull" value="org.hamcrest.MatcherAssert.assertThat($SOMETHING$, org.hamcrest.Matchers.is(org.hamcrest.Matchers.nullValue()));$END$" description="assertThat equals nullvalue [with hamcrest]" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="SOMETHING" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="aneq" value="org.hamcrest.MatcherAssert.assertThat($SOMETHING$, org.hamcrest.Matchers.is(org.hamcrest.Matchers.not(org.hamcrest.Matchers.equalTo($VALUE$))));$END$" description="assertThat not equals value [with hamcrest]" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="SOMETHING" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ntest5" value="@org.junit.jupiter.api.Nested&#10;class $NAME$ {&#10;    $END$&#10;}" description="generates a nested test class" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
</templateSet>